// OOP244 Workshop One | Reflection and Quiz One Corrections
// reflect.txt
// Chaz-lee Pierre
// cpierre4@myseneca.ca
// 123206179
// May 21st, 2018

1. What is a namespace? Explain its purpose.

A namespace is a modularized section of code used to organize groups of 
related statements. The purpose of namespaces is to prevent potential same identifier 
name errors generated by the compiler by providing a scope to all related identifiers.

2. Why are header files needed? Explain.

Header files are needed to organize the code into seperate sets of information, 
and improve the code's readability. Every statement in a program is critical to how a
program will run but not all statements need to be read by the reader, for example 
definitions/declarations are self explanatory and can be stored in a secondary file
(header files) while the logic of the program should be stored in the main file (cpp 
file) as it is the most difficult to understand.

3. In the instructions above, you were directed to compile only .cpp files but not the .h files. Explain why you should never compile header files.

It is important not to compile header files along with .cpp files, rather instead use 
the #include preprocessor directive to ensure the contents of the header file are not
defined more than once in the final compilation.

4. Explain why you should never include .cpp files in another file. 

The preprocessor directive #include takes the contents of the included file and pastes 
it where the #include statement was placed. If a program is compiling multiple .cpp 
files AND including the same .cpp file, multiple declarations will occur and the 
compiler will generate an error.

5. Explain in your own words what have you learned on this workshop.

In this workshop I have learned the importance of organizing and modularizing code
into seperate self contained components. I have also learned how to seperate multiple 
.cpp files and .h files while still compiling them all as one, as previously I was 
used to only separating multiple header files from one .c file.

// Quiz 1 Reflection:

3. A function's signature consists of the function's identifier, the function's 
parameters and the order of parameter types.

4. The following program passes apple in the main program by reference to function 
discount(...). Fill in the blanks.

void discount(Item& item) {
item.price *= 0.50;
}

discount(apple);

5. Write a statement that declares an array of 6 pointers to floats in statically 
allocated memory.

int *floats[6];

6. Declare the type of xxx in the statement below (complete the first part of the 
statement).

double xxx = new double[n];

8. Write a forward declaration of the struct Item defined in the program in question
4 above.

struct Item; 
